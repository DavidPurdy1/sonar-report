<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>SonarQube <%= vulnerabilityPhrase %> Report</title>
	<style>
	/*
	The sss stylesheet is released under the MIT license.
	<https://github.com/Thiht/sss>
	*/
	<%- stylesheet %>
	</style>
</head>

<body>
	<div class="summup">
		<!-- insert your company banner here -->
		<!--
		<p class="banner">
			<a href="https://www.soprasteria.com/" target="_blank">
				<img src="https://upload.wikimedia.org/wikipedia/en/thumb/0/02/Sopra_Steria_logo.svg/1280px-Sopra_Steria_logo.svg.png" alt="Sopra Steria" height="50">
			</a>
		</p>
		-->

        <h1>SonarQube <%= vulnerabilityPhrase %> Report
            <%if (includeLeakPeriod) { %>
            <div class="tab" style="float:right;border: 1px solid #ccc;">
                <button class="codeType" id="newCode" onclick="filterCode('NEW')">New Code</button>
                <button class="codeType" id="overallCode" onclick="filterCode('ALL')">Overall Code</button>
            </div>
            <% } %>
        </h1>

		<dl>
			<dt>Report Generated On</dt>
			<dd><%= date %></dd>

			<dt>Project Name</dt>
			<dd><%= projectName %></dd>

			<dt>Application</dt>
			<dd><%= applicationName %></dd>

			<dt>Release</dt>
			<dd><%= releaseName %></dd>

			<dt>Branch</dt>
			<dd><%= branch %></dd>

            <div class="newCode">
			<dt>Delta analysis</dt>
			<dd><%= deltaAnalysis %></dd>

			<%if (previousPeriod) { %>
			<dt>Reference period </dt>
			<dd><%= previousPeriod %></dd>
			<% } %>
            </div>
		</dl>

        <%if (qualityGateStatus) { %>
        <h2>Quality gate status: <%= qualityGateStatus.projectStatus.status %> on <%= qualityGateStatus.projectStatus.period?.date %> (<%= qualityGateStatus.projectStatus.period?.parameter %>)</h2>

          <table>
            <thead>
                <tr>
                    <th></th>
                    <th>Metric</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>

          <% for (const condition of qualityGateStatus.projectStatus.conditions) { %>
            <tr>
                <td style="background-color:<%- condition.status == 'OK' ? '#0a0' : '#d4333f' %>"></td>
                <td><%= condition.metricKey %></td>
                <td><%= condition.actualValue %> <%= condition.comparator == 'GT' ? '>' : '<' %> <%= condition.errorThreshold %></td>
            </tr>
          <% } %>

          	</tbody>
          </table>
        <% } %>

		<h2>Summary of the Detected <%= vulnerabilityPluralPhrase %></h2>
		<table id="summary">
			<thead>
				<tr>
					<th></th>
					<th>Severity</th>
					<th>Number of Issues</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="sevBLOCKER"></td>
					<td>BLOCKER</td>
					<td><%= summary.blocker %></td>
				</tr>
				<tr>
					<td class="sevCRITICAL"></td>
					<td>CRITICAL</td>
					<td><%= summary.critical %></td>
				</tr>
				<tr>
					<td class="sevMAJOR"></td>
					<td>MAJOR</td>
					<td><%= summary.major %></td>
				</tr>
				<tr>
					<td class="sevMINOR"></td>
					<td>MINOR</td>
					<td><%= summary.minor %></td>
				</tr>
			</tbody>
		</table>
        <table id="summarySinceLeakPeriod">
            <thead>
                <tr>
                    <th></th>
                    <th>Severity</th>
                    <th>Number of Issues</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="sevBLOCKER"></td>
                    <td>BLOCKER</td>
                    <td><%= summarySinceLeakPeriod.blocker %></td>
                </tr>
                <tr>
                    <td class="sevCRITICAL"></td>
                    <td>CRITICAL</td>
                    <td><%= summarySinceLeakPeriod.critical %></td>
                </tr>
                <tr>
                    <td class="sevMAJOR"></td>
                    <td>MAJOR</td>
                    <td><%= summarySinceLeakPeriod.major %></td>
                </tr>
                <tr>
                    <td class="sevMINOR"></td>
                    <td>MINOR</td>
                    <td><%= summarySinceLeakPeriod.minor %></td>
                </tr>
            </tbody>
        </table>

		<%if (issues.length > 0) { %>
		<canvas id="vulnerabilitiesPieChart" width="200" height="200"></canvas>
		<% } %>
	</div>

	<div class=detail>
		<%if (issues.length > 0) { %>
		<h2>Detail of the Detected <%= vulnerabilityPluralPhrase %></h2>
        <div class="tab">
          <button class="issueSeverity" onclick="filterIssueSeverity(event, 'ALL')">ALL</button>
          <button class="issueSeverity" onclick="filterIssueSeverity(event, 'BLOCKER')">BLOCKER</button>
          <button class="issueSeverity" onclick="filterIssueSeverity(event, 'CRITICAL')">CRITICAL</button>
          <button class="issueSeverity" onclick="filterIssueSeverity(event, 'MAJOR')">MAJOR</button>
          <button class="issueSeverity" onclick="filterIssueSeverity(event, 'MINOR')">MINOR</button>
        </div>
        <div class="tab" style="float:right;">
          <button class="issueType" onclick="filterIssueType(event, 'ALL')">ALL</button>
          <button class="issueType" onclick="filterIssueType(event, 'VULNERABILITY')">VULNERABILITY</button>
          <button class="issueType" onclick="filterIssueType(event, 'CODE_SMELL')">CODE_SMELL</button>
          <button class="issueType" onclick="filterIssueType(event, 'BUG')">BUG</button>
          <button class="issueType" onclick="filterIssueType(event, 'SECURITY_HOTSPOT')">SECURITY_HOTSPOT</button>
        </div>
        <table id="issuesTable">
			<thead>
				<tr>
					<th>Rule</th>
					<th>Severity</th>
					<th>Component</th>
					<th>Line</th>
					<th>Description</th>
					<th>Message</th>
					<th class="hidden">Key</th>
                    <th class="hidden">SinceLeakPeriod</th>
                    <th>Type</th>
					<th>Status</th>
				</tr>
			</thead>
			<tbody>
				<% for(var i = 0; i < issues.length; i++) { %>
				<tr>
					<td><a href="<%= sonarBaseURL %>/organizations/<%= sonarOrganization %>/rules?open=<%= issues[i].rule %>&rule_key=<%= issues[i].rule %>"><%= issues[i].rule %></a></td>
					<td><%= issues[i].severity %></td>
					<td class="component"><%= issues[i].component %></td>
					<td><%= issues[i].line %></td>
					<td><%= issues[i].description %></td>
					<td><%= issues[i].message %></td>
					<td class="hidden"><%= issues[i].key %></td>
                    <td class="hidden"><%= issues[i].sinceLeakPeriod ? "SinceLeakPeriod" : "" %></td>
                    <td><%= issues[i].type %></td>
                    <td><%- issues[i].link(issues[i].status) %></td>
				</tr>
				<% } %>
			</tbody>
		</table>

		<% } %>

		<%if (!noRulesInReport) { %>
		<h3>Known Security Rules</h3>
		<table class="rulestable">
			<thead>
				<tr>
					<th>Rule</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				<% for (const [ruleKey, rule] of rules) { %>
				<tr>
					<td><a
							href="https://next.sonarqube.com/sonarqube/coding_rules#rule_key=<%= ruleKey %>"><%= ruleKey %></a>
					</td>
					<td>
						<details>
							<%- rule.htmlDesc %>
						</details>
					</td>
				</tr>
				<% } %>
			</tbody>
		</table>
		<% } %>
	</div>

	<%if (issues.length > 0) { %>
    <script>
        document.getElementsByClassName("issueType")[0].className += " active";
        document.getElementsByClassName("issueSeverity")[0].className += " active";
        filterCode("NEW")
        
        function filterCode(type) {
          tablinks = document.getElementsByClassName("codeType");
          if (type == "NEW"){
              tablinks[0].className += " active";
              tablinks[1].className = tablinks[1].className.replace(" active", "");
          } else {
              tablinks[0].className = tablinks[0].className.replace(" active", "");
              tablinks[1].className += " active";
          }

          codeTypeSelected = selectedCodeType();
          newCodeElement = document.getElementsByClassName("newCode")[0];
          summaryTable = document.getElementById("summary");
          summarySinceLeakPeriodTable = document.getElementById("summarySinceLeakPeriod");
          if (codeTypeSelected == "NEW"){
              newCodeElement.style.display = "";
              summaryTable.style.display = "none";
              summarySinceLeakPeriodTable.style.display = "";
          } else {
              newCodeElement.style.display = "none";
              summaryTable.style.display = "";
              summarySinceLeakPeriodTable.style.display = "none";
          }

          filterTable();
        }

        function selectedCodeType() {
            tablinks = document.getElementsByClassName("codeType");
            codeTypeSelected = "ALL";
            for (i = 0; i < tablinks.length; i++) {
              if (tablinks[i].className.indexOf(" active") > -1) {
                  switch(i) {
                      case 0:
                        codeTypeSelected = "NEW";
                        break;
                      case 1:
                        codeTypeSelected = "ALL";
                        break;
                  }
                  break;
              }
            }
            return codeTypeSelected
        }

        function selectedIssueSeverity() {
            tablinks = document.getElementsByClassName("issueSeverity");
            issueSeveritySelected = "ALL";
            for (i = 0; i < tablinks.length; i++) {
              if (tablinks[i].className.indexOf(" active") > -1) {
                  switch(i) {
                      case 0:
                        issueSeveritySelected = "ALL";
                        break;
                      case 1:
                        issueSeveritySelected = "BLOCKER";
                        break;
                      case 2:
                        issueSeveritySelected = "CRITICAL";
                        break;
                      case 3:
                        issueSeveritySelected = "MAJOR";
                        break;
                      case 4:
                        issueSeveritySelected = "MINOR";
                        break;
                  }
                  break;
              }
            }
            return issueSeveritySelected
        }

        function selectedIssueType() {
              tablinks = document.getElementsByClassName("issueType");
              issueTypeSelected = "ALL";
              for (i = 0; i < tablinks.length; i++) {
                if (tablinks[i].className.indexOf(" active") > -1) {
                    switch(i) {
                        case 0:
                          issueTypeSelected = "ALL";
                          break;
                        case 1:
                          issueTypeSelected = "VULNERABILITY";
                          break;
                        case 2:
                          issueTypeSelected = "CODE_SMELL";
                          break;
                        case 3:
                          issueTypeSelected = "BUG";
                          break;
                        case 4:
                          issueTypeSelected = "SECURITY_HOTSPOT";
                          break;
                    }
                    break;
                }
              }
              return issueTypeSelected
        }

        function filterIssueType(evt, type) {
          tablinks = document.getElementsByClassName("issueType");
          for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
          }
          evt.currentTarget.className += " active";
          filterTable();
        }
        function filterIssueSeverity(evt, severity) {
          tablinks = document.getElementsByClassName("issueSeverity");
          for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
          }
          evt.currentTarget.className += " active";
          filterTable();
        }

        function filterTable() {
            issueSeveritySelected = selectedIssueSeverity();
            issueTypeSelected = selectedIssueType();
            codeTypeSelected = selectedCodeType();
            var table, tr, td, i, txtValue;
              table = document.getElementById("issuesTable");
              tr = table.getElementsByTagName("tr");
              for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td")[8];
                td2 = tr[i].getElementsByTagName("td")[1];
                td3 = tr[i].getElementsByTagName("td")[7];
                if (td) {
                  issueType = td.textContent || td.innerText;
                  isseueSeverity = td2.textContent || td2.innerText;
                  isseueSinceLeakPeriod = td3.textContent || td3.innerText;
                  if ((codeTypeSelected != "NEW" || isseueSinceLeakPeriod != "") && (issueTypeSelected == "ALL" || issueTypeSelected == issueType) && (issueSeveritySelected == "ALL" || issueSeveritySelected == isseueSeverity)) {
                    tr[i].style.display = "";
                  } else {
                    tr[i].style.display = "none";
                  }
                }
              }
        }
    </script>

	<script>
		var canvas = document.getElementById("vulnerabilitiesPieChart");
		var ctx = canvas.getContext("2d");

		var data = [
			<%= summary.blocker %> ,
			<%= summary.critical %> ,
			<%= summary.major %> ,
			<%= summary.minor %>
		];
		var total = data.reduce(function (sum, n) {
			return sum + n;
		})
		var colors = ['#2c3e50', '#d43223', '#f39c12', '#319ddb'];

		for (var i = 0, lastend = 0; i < data.length; i++) {
			ctx.fillStyle = colors[i];
			ctx.beginPath();
			ctx.moveTo(canvas.width / 2, canvas.height / 2);
			ctx.arc(canvas.width / 2, canvas.height / 2, canvas.height / 2, lastend, lastend + (Math.PI * 2 * (data[i] /
				total)), false);
			ctx.lineTo(canvas.width / 2, canvas.height / 2);
			ctx.fill();
			lastend += Math.PI * 2 * (data[i] / total);
		}
	</script>

	<% } %>
</body>

</html>
